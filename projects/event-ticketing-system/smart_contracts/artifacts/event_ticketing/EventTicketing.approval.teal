#pragma version 10

smart_contracts.event_ticketing.contract.EventTicketing.approval_program:
    // smart_contracts/event_ticketing/contract.py:4
    // class EventTicketing(ARC4Contract):
    method "create_application(uint64,uint64)void"
    method "bootstrap_ticket_asset(pay)uint64"
    method "update_price(uint64)void"
    method "view_price()uint64"
    method "view_asset()uint64"
    method "buy(pay)void"
    method "deleteApplication()void"
    txna ApplicationArgs 0
    match main_create_application_route@1 main_bootstrap_ticket_asset_route@2 main_update_price_route@3 main_view_price_route@4 main_view_asset_route@5 main_buy_route@6 main_deleteApplication_route@7
    err // reject transaction

main_create_application_route@1:
    // smart_contracts/event_ticketing/contract.py:10-11
    // # create application
    // @arc4.abimethod(allow_actions=['NoOp'], create='require')
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // smart_contracts/event_ticketing/contract.py:4
    // class EventTicketing(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/event_ticketing/contract.py:10-11
    // # create application
    // @arc4.abimethod(allow_actions=['NoOp'], create='require')
    callsub create_application
    int 1
    return

main_bootstrap_ticket_asset_route@2:
    // smart_contracts/event_ticketing/contract.py:18-19
    // # bootstrap ticket asset
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/event_ticketing/contract.py:4
    // class EventTicketing(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/event_ticketing/contract.py:18-19
    // # bootstrap ticket asset
    // @arc4.abimethod
    callsub bootstrap_ticket_asset
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_update_price_route@3:
    // smart_contracts/event_ticketing/contract.py:44-45
    // # change ticket price
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/event_ticketing/contract.py:4
    // class EventTicketing(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/event_ticketing/contract.py:44-45
    // # change ticket price
    // @arc4.abimethod
    callsub update_price
    int 1
    return

main_view_price_route@4:
    // smart_contracts/event_ticketing/contract.py:50-51
    // # View current price
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub view_price
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_view_asset_route@5:
    // smart_contracts/event_ticketing/contract.py:55-56
    // # View asset id
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub view_asset
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_buy_route@6:
    // smart_contracts/event_ticketing/contract.py:60-61
    // # buy ticket
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/event_ticketing/contract.py:4
    // class EventTicketing(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/event_ticketing/contract.py:60-61
    // # buy ticket
    // @arc4.abimethod
    callsub buy
    int 1
    return

main_deleteApplication_route@7:
    // smart_contracts/event_ticketing/contract.py:81-82
    // # delete the application
    // @arc4.abimethod(allow_actions=['DeleteApplication'])
    txn OnCompletion
    int DeleteApplication
    ==
    assert // OnCompletion is DeleteApplication
    txn ApplicationID
    assert // is not creating
    callsub deleteApplication
    int 1
    return


// smart_contracts.event_ticketing.contract.EventTicketing.create_application(num_of_tickets: uint64, ticket_price: uint64) -> void:
create_application:
    // smart_contracts/event_ticketing/contract.py:10-12
    // # create application
    // @arc4.abimethod(allow_actions=['NoOp'], create='require')
    // def create_application(self, num_of_tickets: UInt64, ticket_price: UInt64) -> None:
    proto 2 0
    // smart_contracts/event_ticketing/contract.py:13
    // assert num_of_tickets > 0, 'Number of tickets must be greater than 0'
    frame_dig -2
    assert // Number of tickets must be greater than 0
    // smart_contracts/event_ticketing/contract.py:14
    // self.ticket_price = ticket_price
    byte "ticket_price"
    frame_dig -1
    app_global_put
    // smart_contracts/event_ticketing/contract.py:15
    // self.asset_created = True
    byte "asset_created"
    int 1
    app_global_put
    // smart_contracts/event_ticketing/contract.py:16
    // self.num_of_tickets = num_of_tickets
    byte "num_of_tickets"
    frame_dig -2
    app_global_put
    retsub


// smart_contracts.event_ticketing.contract.EventTicketing.bootstrap_ticket_asset(mbr_pay: uint64) -> uint64:
bootstrap_ticket_asset:
    // smart_contracts/event_ticketing/contract.py:18-20
    // # bootstrap ticket asset
    // @arc4.abimethod
    // def bootstrap_ticket_asset(self, mbr_pay: gtxn.PaymentTransaction) -> UInt64:
    proto 1 1
    // smart_contracts/event_ticketing/contract.py:21
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/event_ticketing/contract.py:22
    // assert self.asset_created == False
    int 0
    byte "asset_created"
    app_global_get_ex
    assert // check asset_created exists
    !
    assert
    // smart_contracts/event_ticketing/contract.py:24
    // assert mbr_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/event_ticketing/contract.py:25
    // assert mbr_pay.amount >= Global.min_balance + Global.asset_create_min_balance
    frame_dig -1
    gtxns Amount
    global MinBalance
    global AssetCreateMinBalance
    +
    >=
    assert
    // smart_contracts/event_ticketing/contract.py:28-34
    // itxn.AssetConfig(
    //     decimals=0,
    //     total=self.num_of_tickets,
    //     default_frozen=False,
    //     freeze=Global.current_application_address,
    // )
    // .submit()
    itxn_begin
    // smart_contracts/event_ticketing/contract.py:30
    // total=self.num_of_tickets,
    int 0
    byte "num_of_tickets"
    app_global_get_ex
    assert // check num_of_tickets exists
    // smart_contracts/event_ticketing/contract.py:32
    // freeze=Global.current_application_address,
    global CurrentApplicationAddress
    itxn_field ConfigAssetFreeze
    // smart_contracts/event_ticketing/contract.py:31
    // default_frozen=False,
    int 0
    itxn_field ConfigAssetDefaultFrozen
    itxn_field ConfigAssetTotal
    // smart_contracts/event_ticketing/contract.py:29
    // decimals=0,
    int 0
    itxn_field ConfigAssetDecimals
    // smart_contracts/event_ticketing/contract.py:28
    // itxn.AssetConfig(
    int acfg
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/event_ticketing/contract.py:28-34
    // itxn.AssetConfig(
    //     decimals=0,
    //     total=self.num_of_tickets,
    //     default_frozen=False,
    //     freeze=Global.current_application_address,
    // )
    // .submit()
    itxn_submit
    // smart_contracts/event_ticketing/contract.py:28-35
    // itxn.AssetConfig(
    //     decimals=0,
    //     total=self.num_of_tickets,
    //     default_frozen=False,
    //     freeze=Global.current_application_address,
    // )
    // .submit()
    // .created_asset.id
    itxn CreatedAssetID
    // smart_contracts/event_ticketing/contract.py:38
    // self.asset_id = asset_id
    byte "asset_id"
    dig 1
    app_global_put
    // smart_contracts/event_ticketing/contract.py:40
    // log(asset_id)
    itob
    log
    // smart_contracts/event_ticketing/contract.py:42
    // return self.asset_id
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    retsub


// smart_contracts.event_ticketing.contract.EventTicketing.update_price(new_price: uint64) -> void:
update_price:
    // smart_contracts/event_ticketing/contract.py:44-46
    // # change ticket price
    // @arc4.abimethod
    // def update_price(self, new_price: UInt64) -> None:
    proto 1 0
    // smart_contracts/event_ticketing/contract.py:47
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/event_ticketing/contract.py:48
    // self.ticket_price = new_price
    byte "ticket_price"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.event_ticketing.contract.EventTicketing.view_price() -> uint64:
view_price:
    // smart_contracts/event_ticketing/contract.py:50-52
    // # View current price
    // @arc4.abimethod
    // def view_price(self) -> UInt64:
    proto 0 1
    // smart_contracts/event_ticketing/contract.py:53
    // return self.ticket_price
    int 0
    byte "ticket_price"
    app_global_get_ex
    assert // check ticket_price exists
    retsub


// smart_contracts.event_ticketing.contract.EventTicketing.view_asset() -> uint64:
view_asset:
    // smart_contracts/event_ticketing/contract.py:55-57
    // # View asset id
    // @arc4.abimethod
    // def view_asset(self) -> UInt64:
    proto 0 1
    // smart_contracts/event_ticketing/contract.py:58
    // return self.asset_id
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    retsub


// smart_contracts.event_ticketing.contract.EventTicketing.buy(buyer_txn: uint64) -> void:
buy:
    // smart_contracts/event_ticketing/contract.py:60-62
    // # buy ticket
    // @arc4.abimethod
    // def buy(self, buyer_txn: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/event_ticketing/contract.py:63
    // assert buyer_txn.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/event_ticketing/contract.py:64
    // assert buyer_txn.amount == self.ticket_price, 'Wrong price provided'
    frame_dig -1
    gtxns Amount
    int 0
    byte "ticket_price"
    app_global_get_ex
    assert // check ticket_price exists
    ==
    assert // Wrong price provided
    // smart_contracts/event_ticketing/contract.py:65
    // assert self.num_of_tickets > 0, 'No tickets left'
    int 0
    byte "num_of_tickets"
    app_global_get_ex
    assert // check num_of_tickets exists
    assert // No tickets left
    // smart_contracts/event_ticketing/contract.py:67
    // ticket_asset = Asset(self.asset_id)
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/event_ticketing/contract.py:68
    // assert Txn.sender.is_opted_in(ticket_asset), 'Asset not opted in'
    txn Sender
    dig 1
    asset_holding_get AssetBalance
    bury 1
    assert // Asset not opted in
    // smart_contracts/event_ticketing/contract.py:69
    // assert ticket_asset.balance(buyer_txn.sender) == 0, 'Ticket already bought'
    frame_dig -1
    gtxns Sender
    dup
    uncover 2
    asset_holding_get AssetBalance
    assert // account opted into asset
    !
    assert // Ticket already bought
    // smart_contracts/event_ticketing/contract.py:71-76
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=buyer_txn.sender,
    //     asset_amount=1,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/event_ticketing/contract.py:72
    // xfer_asset=self.asset_id,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/event_ticketing/contract.py:74
    // asset_amount=1,
    int 1
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/event_ticketing/contract.py:71
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/event_ticketing/contract.py:75
    // fee=0,
    int 0
    itxn_field Fee
    // smart_contracts/event_ticketing/contract.py:71-76
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=buyer_txn.sender,
    //     asset_amount=1,
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/event_ticketing/contract.py:78
    // self.num_of_tickets = self.num_of_tickets - 1
    int 0
    byte "num_of_tickets"
    app_global_get_ex
    assert // check num_of_tickets exists
    int 1
    -
    byte "num_of_tickets"
    swap
    app_global_put
    retsub


// smart_contracts.event_ticketing.contract.EventTicketing.deleteApplication() -> void:
deleteApplication:
    // smart_contracts/event_ticketing/contract.py:81-83
    // # delete the application
    // @arc4.abimethod(allow_actions=['DeleteApplication'])
    // def deleteApplication(self) -> None:
    proto 0 0
    // smart_contracts/event_ticketing/contract.py:84
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/event_ticketing/contract.py:86-91
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=Global.creator_address,
    // ).submit()
    itxn_begin
    // smart_contracts/event_ticketing/contract.py:87
    // xfer_asset=self.asset_id,
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check asset_id exists
    // smart_contracts/event_ticketing/contract.py:88
    // asset_receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/event_ticketing/contract.py:90
    // asset_close_to=Global.creator_address,
    dup
    itxn_field AssetCloseTo
    // smart_contracts/event_ticketing/contract.py:89
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/event_ticketing/contract.py:86
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/event_ticketing/contract.py:86-91
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=Global.creator_address,
    // ).submit()
    itxn_submit
    // smart_contracts/event_ticketing/contract.py:93-97
    // itxn.Payment(
    //     amount=0,
    //     close_remainder_to=Global.creator_address,
    //     receiver=Global.creator_address,
    // ).submit()
    itxn_begin
    // smart_contracts/event_ticketing/contract.py:95
    // close_remainder_to=Global.creator_address,
    global CreatorAddress
    // smart_contracts/event_ticketing/contract.py:96
    // receiver=Global.creator_address,
    dup
    itxn_field Receiver
    itxn_field CloseRemainderTo
    // smart_contracts/event_ticketing/contract.py:94
    // amount=0,
    int 0
    itxn_field Amount
    // smart_contracts/event_ticketing/contract.py:93
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/event_ticketing/contract.py:93-97
    // itxn.Payment(
    //     amount=0,
    //     close_remainder_to=Global.creator_address,
    //     receiver=Global.creator_address,
    // ).submit()
    itxn_submit
    retsub
