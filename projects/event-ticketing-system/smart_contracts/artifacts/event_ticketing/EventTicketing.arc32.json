{
    "hints": {
        "create_application(uint64,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "bootstrap_ticket_asset(pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_price(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "view_price()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "view_asset()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buy(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteApplication()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZXZlbnRfdGlja2V0aW5nLmNvbnRyYWN0LkV2ZW50VGlja2V0aW5nLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXZlbnRfdGlja2V0aW5nL2NvbnRyYWN0LnB5OjQKICAgIC8vIGNsYXNzIEV2ZW50VGlja2V0aW5nKEFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "asset_created": {
                    "type": "uint64",
                    "key": "asset_created"
                },
                "asset_id": {
                    "type": "uint64",
                    "key": "asset_id"
                },
                "num_of_tickets": {
                    "type": "uint64",
                    "key": "num_of_tickets"
                },
                "ticket_price": {
                    "type": "uint64",
                    "key": "ticket_price"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "EventTicketing",
        "methods": [
            {
                "name": "create_application",
                "args": [
                    {
                        "type": "uint64",
                        "name": "num_of_tickets"
                    },
                    {
                        "type": "uint64",
                        "name": "ticket_price"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bootstrap_ticket_asset",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "update_price",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_price"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "view_price",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "view_asset",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "buy",
                "args": [
                    {
                        "type": "pay",
                        "name": "buyer_txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deleteApplication",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}